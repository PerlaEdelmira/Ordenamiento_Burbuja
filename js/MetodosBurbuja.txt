import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

class MetodosDeOrdenamiento{
//--------------------------------------------------------------------------------1)Metodo Burbuja 
	public void ordenamientoBurbuja1(int[] numeros) {
		int aux, conReco = 0, conInter = 0, conComp=0;
		long tInicio, tFin;
		tInicio = System.nanoTime();
		//iniciar Tiempo
		for (int i=2;i<=numeros.length;i++) {
			for (int j=0;j<=numeros.length-i;j++) {
				if(numeros[j]> numeros[j+1]) {
					aux= numeros[j];
					numeros[j] = numeros[j+1];
					numeros[j+1]=aux;
					conInter++;
				}
				conComp++;
			}
			conReco++;
		}
		mostrarVector(numeros);
		tFin = System.nanoTime();
		System.out.println("-------> Tiempo de Procesamiento: " + (tFin - tInicio));
		System.out.println("-------> Recorridos: " +conReco );
		System.out.println("-------> Intercambios: " + conInter );
		System.out.println("-------> Comparaciones: " + conComp);
		
	}
	public void ordenamientoBurbuja2(int []numeros) {
		int i=1;
		boolean ordenado = false;
		int conReco = 0, conInter = 0, conComp=0;
		long tInicio, tFin;
		tInicio = System.nanoTime();
		while (i<numeros.length && (ordenado == false) ) {
			i = i+1;
			ordenado = true;
			for(int j=0; j<=numeros.length-i; j++) {
				if(numeros[j]>numeros[j+1]) {
					ordenado = false;
					int aux = numeros[j];
					numeros[j] = numeros[j+1];
					numeros[j+1] = aux;
					conInter++;
				}
				conComp++;
			}
			conReco++;
		}
		mostrarVector(numeros);
		tFin = System.nanoTime();
		System.out.println("-------> Tiempo de Procesamiento: " + (tFin - tInicio));
		System.out.println("-------> Recorridos: " +conReco );
		System.out.println("-------> Intercambios: " + conInter );
		System.out.println("-------> Comparaciones: " + conComp);
	}
}
public class EjemploMetodosORdenamiento {
	public static void main(String[] args) {

	}
}