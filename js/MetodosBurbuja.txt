import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;

class MetodosDeOrdenamiento{
//--------------------------------------------------------------------------------1)Metodo Burbuja 
	public void ordenamientoBurbuja1(int[] numeros) {
		int aux, conReco = 0, conInter = 0, conComp=0;
		long tInicio, tFin;
		tInicio = System.nanoTime();
		//iniciar Tiempo
		for (int i=2;i<=numeros.length;i++) {
			for (int j=0;j<=numeros.length-i;j++) {
				if(numeros[j]> numeros[j+1]) {
					aux= numeros[j];
					numeros[j] = numeros[j+1];
					numeros[j+1]=aux;
					conInter++;
				}
				conComp++;
			}
			conReco++;
		}
		mostrarVector(numeros);
		tFin = System.nanoTime();
		System.out.println("-------> Tiempo de Procesamiento: " + (tFin - tInicio));
		System.out.println("-------> Recorridos: " +conReco );
		System.out.println("-------> Intercambios: " + conInter );
		System.out.println("-------> Comparaciones: " + conComp);
		
	}
	public void ordenamientoBurbuja2(int []numeros) {
		int i=1;
		boolean ordenado = false;
		int conReco = 0, conInter = 0, conComp=0;
		long tInicio, tFin;
		tInicio = System.nanoTime();
		while (i<numeros.length && (ordenado == false) ) {
			i = i+1;
			ordenado = true;
			for(int j=0; j<=numeros.length-i; j++) {
				if(numeros[j]>numeros[j+1]) {
					ordenado = false;
					int aux = numeros[j];
					numeros[j] = numeros[j+1];
					numeros[j+1] = aux;
					conInter++;
				}
				conComp++;
			}
			conReco++;
		}
		mostrarVector(numeros);
		tFin = System.nanoTime();
		System.out.println("-------> Tiempo de Procesamiento: " + (tFin - tInicio));
		System.out.println("-------> Recorridos: " +conReco );
		System.out.println("-------> Intercambios: " + conInter );
		System.out.println("-------> Comparaciones: " + conComp);
	}
	public void ordenamientoBurbuja3(int []numeros) {
		int aux, conReco = 0, conInter = 0, conComp=0;
		long tInicio, tFin;
		tInicio = System.nanoTime();
		int i=1;
		boolean ordenado;
		do {
			i=i+1;
			ordenado =true;
			for(int j=0; j<=numeros.length-i; j++) {
				if(numeros[j]>numeros[j+1]) {
					aux = numeros[j];
					numeros[j] = numeros[j+1];
					numeros[j+1]=aux;
					conInter++;
				}
				conComp++;
			}
			conReco++;
		}while((i<numeros.length)&&(ordenado == true));
		mostrarVector(numeros);
		tFin = System.nanoTime();
		System.out.println("-------> Tiempo de Procesamiento: " + (tFin - tInicio));
		System.out.println("-------> Recorridos: " +conReco );
		System.out.println("-------> Intercambios: " + conInter );
		System.out.println("-------> Comparaciones: " + conComp);
	
	}
	public void mostrarVector(int numeros[]) {
		System.out.println(Arrays.toString(numeros));
	}

}
public class EjemploMetodosORdenamiento {
	public static void main(String[] args) {
	
	MetodosDeOrdenamiento mo = new MetodosDeOrdenamiento();
		Scanner entrada = new Scanner(System.in);
		int vec[];
		String op = "";
		byte num =0;
		do {
			System.out.println("Ingrese la Opcion: " + "\n1)1,000" + "\n2)10,000" + "\n3)100,000" + "\n4)1,000,000");
			num = entrada.nextByte();
			System.out.println("Ingrese una opcion: " + "\n Ordenamiento Por Burbuja 1, 2 o 3");
			op = entrada.next();
			
		switch (op) {
		case "1": System.out.println("\n============= ORDENAMIENTO BURBUJA 1 ============");
						if(num == 1) {
							vec = new int [1000];
							for(int i=0; i<vec.length; i++) {
								vec[i]= new Random().nextInt(100);
							}
							mo.mostrarVector(vec);
							System.out.println("Datos de eficiencia del algoritmo: ");
							mo.ordenamientoBurbuja1(vec);
						}else if(num == 2) {
							vec = new int [10000];
							for(int i=0; i<vec.length; i++) {
								vec[i]= new Random().nextInt(100);
							}
							mo.mostrarVector(vec);
							System.out.println("Datos de eficiencia del algoritmo: ");
							mo.ordenamientoBurbuja1(vec);
						}else if(num == 3) {
							vec = new int [100000];
							for(int i=0; i<vec.length; i++) {
								vec[i]= new Random().nextInt(100);
							}
							mo.mostrarVector(vec);
							System.out.println("Datos de eficiencia del algoritmo: ");
							mo.ordenamientoBurbuja1(vec);
						}else if(num == 4) {
							vec = new int [1000000];
							for(int i=0; i<vec.length; i++) {
								vec[i]= new Random().nextInt(100);
							}
							mo.mostrarVector(vec);
							System.out.println("Datos de eficiencia del algoritmo: ");
							mo.ordenamientoBurbuja1(vec);
						}
						break;
	case "2":System.out.println("\n============= ORDENAMIENTO BURBUJA 2 ============");
			if(num == 1) {
				vec = new int [1000];
				for(int i=0; i<vec.length; i++) {
					vec[i]= new Random().nextInt(100);
				}
				mo.mostrarVector(vec);
				System.out.println("Datos de eficiencia del algoritmo: ");
				mo.ordenamientoBurbuja2(vec);
			}else if(num == 2) {
				vec = new int [10000];
				for(int i=0; i<vec.length; i++) {
					vec[i]= new Random().nextInt(100);
				}
				mo.mostrarVector(vec);
				System.out.println("Datos de eficiencia del algoritmo: ");
				mo.ordenamientoBurbuja2(vec);
			}else if(num == 3) {
				vec = new int [100000];
				for(int i=0; i<vec.length; i++) {
					vec[i]= new Random().nextInt(100);
				}
				mo.mostrarVector(vec);
				System.out.println("Datos de eficiencia del algoritmo: ");
				mo.ordenamientoBurbuja2(vec);
			}else if(num == 4) {
				vec = new int [1000000];
				for(int i=0; i<vec.length; i++) {
					vec[i]= new Random().nextInt(100);
				}
				mo.mostrarVector(vec);
				System.out.println("Datos de eficiencia del algoritmo: ");
				mo.ordenamientoBurbuja2(vec);
			}
			break;
	case "3":System.out.println("\n============= ORDENAMIENTO BURBUJA 3 ============");
				if(num == 1) {
					vec = new int [1000];
					for(int i=0; i<vec.length; i++) {
						vec[i]= new Random().nextInt(100);
					}
					mo.mostrarVector(vec);
					System.out.println("Datos de eficiencia del algoritmo: ");
					mo.ordenamientoBurbuja3(vec);
				}else if(num == 2) {
					vec = new int [10000];
					for(int i=0; i<vec.length; i++) {
						vec[i]= new Random().nextInt(100);
					}
					mo.mostrarVector(vec);
					System.out.println("Datos de eficiencia del algoritmo: ");
					mo.ordenamientoBurbuja3(vec);
				}else if(num == 3) {
					vec = new int [100000];
					for(int i=0; i<vec.length; i++) {
						vec[i]= new Random().nextInt(100);
					}
					mo.mostrarVector(vec);
					System.out.println("Datos de eficiencia del algoritmo: ");
					mo.ordenamientoBurbuja3(vec);
				}else if(num == 4) {
					vec = new int [1000000];
					for(int i=0; i<vec.length; i++) {
						vec[i]= new Random().nextInt(100);
					}
					mo.mostrarVector(vec);
					System.out.println("Datos de eficiencia del algoritmo: ");
					mo.ordenamientoBurbuja3(vec);
				}		
			break;
						
		}
	}while(op!="5");
	}
}